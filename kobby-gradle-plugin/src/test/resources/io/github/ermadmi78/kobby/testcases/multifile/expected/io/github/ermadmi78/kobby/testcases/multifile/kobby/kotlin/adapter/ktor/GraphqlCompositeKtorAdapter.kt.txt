@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.adapter.ktor

import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.GraphqlAdapter
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.GraphqlMapper
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.GraphqlReceiver
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.MyMutationDto
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.MyQueryDto
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.MySubscriptionDto
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlClientMessage
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlClientMessageComplete
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlClientMessageConnectionInit
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlClientMessagePing
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlClientMessagePong
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlClientMessageSubscribe
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlMutationException
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlMutationResult
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlQueryException
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlQueryResult
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlRequest
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlServerMessage
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlServerMessageComplete
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlServerMessageConnectionAck
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlServerMessageError
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlServerMessageNext
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlServerMessagePing
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlServerMessagePong
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlSubscriptionException
import io.ktor.client.HttpClient
import io.ktor.client.plugins.websocket.webSocket
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.websocket.Frame
import io.ktor.websocket.WebSocketSession
import io.ktor.websocket.readText
import io.ktor.websocket.send
import kotlin.Any
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.Map
import kotlin.collections.contains
import kotlin.collections.forEach
import kotlin.collections.isNotEmpty
import kotlin.collections.mapOf
import kotlin.collections.plus
import kotlin.coroutines.cancellation.CancellationException
import kotlin.error
import kotlin.let
import kotlin.random.Random
import kotlin.require
import kotlin.takeIf
import kotlin.to
import kotlinx.coroutines.withTimeoutOrNull

public open class GraphqlCompositeKtorAdapter(
  protected val client: HttpClient,
  protected val httpUrl: String,
  protected val webSocketUrl: String,
  protected val mapper: GraphqlMapper,
  protected val requestHeaders: suspend () -> Map<String, String> = { mapOf<String, String>() },
  protected val subscriptionPayload: suspend () -> Map<String, Any?>? = { null },
  protected val subscriptionReceiveTimeoutMillis: Long? = 10_000,
  protected val httpAuthorizationTokenHeader: String = "Authorization",
  protected val webSocketAuthorizationTokenHeader: String = "authToken",
  protected val idGenerator: () -> String = { Random.nextLong().toString() },
  protected val listener: (GraphqlRequest) -> Unit = {},
) : GraphqlAdapter {
  override suspend fun executeQuery(query: String, variables: Map<String, Any?>): MyQueryDto {
    val request = GraphqlRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders()
    val content = client.post {
      setBody<String>(mapper.serialize(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.deserialize(content, GraphqlQueryResult::class)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw GraphqlQueryException(
            "GraphQL query failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw GraphqlQueryException(
          "GraphQL query completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }

  override suspend fun executeMutation(query: String, variables: Map<String, Any?>): MyMutationDto {
    val request = GraphqlRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders()
    val content = client.post {
      setBody<String>(mapper.serialize(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.deserialize(content, GraphqlMutationResult::class)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw GraphqlMutationException(
            "GraphQL mutation failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw GraphqlMutationException(
          "GraphQL mutation completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }

  override suspend fun executeSubscription(
    query: String,
    variables: Map<String, Any?>,
    block: suspend GraphqlReceiver<MySubscriptionDto>.() -> Unit,
  ) {
    val httpHeaders: Map<String, String> = requestHeaders()
    val payload: Map<String, Any?>? = subscriptionPayload()
    client.webSocket(
      webSocketUrl,
      request = {
        httpHeaders.forEach { (key, value) ->
          headers[key] = value
        }
      }
    ) {
      var initPayload: Map<String, Any?>? = payload
      if (httpAuthorizationTokenHeader in httpHeaders) {
        if (initPayload == null) {
          initPayload = mapOf()
        }

        if (webSocketAuthorizationTokenHeader !in initPayload) {
          @Suppress("SuspiciousCollectionReassignment")
          initPayload += mapOf(webSocketAuthorizationTokenHeader to
              httpHeaders[httpAuthorizationTokenHeader])
        }
      }

      val request = GraphqlRequest(query, variables)
      listener(request)

      executeSubscriptionImpl(initPayload, request, block)
    }
  }

  protected open suspend fun WebSocketSession.executeSubscriptionImpl(
    initPayload: Map<String, Any?>?,
    request: GraphqlRequest,
    block: suspend GraphqlReceiver<MySubscriptionDto>.() -> Unit,
  ) {
    val socket = this
    sendMessage(socket, GraphqlClientMessageConnectionInit(initPayload))

    while (true) {
      when (val reply = receiveMessage(socket) ?: throw GraphqlSubscriptionException("""Receive timeout expired ($subscriptionReceiveTimeoutMillis millis)""",
          request)) {
        is GraphqlServerMessageConnectionAck -> {
          break
        }
        is GraphqlServerMessagePing -> {
          sendMessage(socket, GraphqlClientMessagePong())
          continue
        }
        else -> {
          throw GraphqlSubscriptionException("""Invalid protocol - unexpected reply: $reply""",
              request)
        }
      }
    }

    val subscriptionId = idGenerator()
    sendMessage(socket, GraphqlClientMessageSubscribe(subscriptionId, request))

    sendMessage(socket, GraphqlClientMessagePing())
    receiveMessage(socket) ?: throw GraphqlSubscriptionException("""Subscription timeout expired""",
        request)

    try {
      block.invoke(object : GraphqlReceiver<MySubscriptionDto> {
        override suspend fun receive(): MySubscriptionDto {
          while (true) {
            var reply = receiveMessage(socket)
            if (reply == null) {
              sendMessage(socket, GraphqlClientMessagePing())
              reply = receiveMessage(socket) ?: throw GraphqlSubscriptionException("""Receive timeout expired ($subscriptionReceiveTimeoutMillis millis)""",
                  request)
            }
            when (reply) {
              is GraphqlServerMessageNext -> {
                require(reply.id == subscriptionId)

                val result = reply.payload
                result.errors?.takeIf { it.isNotEmpty() }?.let {
                  throw GraphqlSubscriptionException(
                        "GraphQL subscription failed",
                        request,
                        it,
                        result.extensions,
                        result.data
                      )
                }
                return result.data ?: throw GraphqlSubscriptionException(
                      "GraphQL subscription completes successfully but returns no data",
                      request,
                      result.errors,
                      result.extensions,
                      null
                    )
              }
              is GraphqlServerMessageError -> {
                require(reply.id == subscriptionId)
                throw GraphqlSubscriptionException("Subscription failed", request, reply.payload)
              }
              is GraphqlServerMessageComplete -> {
                require(reply.id == subscriptionId)
                throw CancellationException("Subscription finished")
              }
              is GraphqlServerMessagePing -> {
                sendMessage(socket, GraphqlClientMessagePong())
                continue
              }
              is GraphqlServerMessagePong -> {
                continue
              }
              else -> {
                throw GraphqlSubscriptionException("""Invalid protocol - unexpected reply: $reply""",
                    request)
              }
            }
          }

          @Suppress("UNREACHABLE_CODE")
          error("Invalid algorithm")
        }
      })
    }
    finally {
      sendMessage(socket, GraphqlClientMessageComplete(subscriptionId))
    }
  }

  protected open suspend fun sendMessage(socket: WebSocketSession, message: GraphqlClientMessage) {
    val content = mapper.serialize(message)
    socket.send(content)
  }

  protected open suspend fun receiveMessage(socket: WebSocketSession): GraphqlServerMessage? {
    val message = if (subscriptionReceiveTimeoutMillis == null) {
      socket.incoming.receive()
    }
    else {
      withTimeoutOrNull(subscriptionReceiveTimeoutMillis) {
        socket.incoming.receive()
      }
    }

    if (message == null) {
      return null
    }

    val content = (message as Frame.Text).readText()
    return mapper.deserialize(content, GraphqlServerMessage::class)
  }
}
