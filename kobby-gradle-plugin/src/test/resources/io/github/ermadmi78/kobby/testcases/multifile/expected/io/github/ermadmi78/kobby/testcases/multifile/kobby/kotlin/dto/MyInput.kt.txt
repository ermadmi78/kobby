@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonInclude
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.GraphqlDSL
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.error
import kotlin.let

@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class MyInput(
  public val id: Long,
  public val name: String? = null
)

public fun MyInput(block: MyInputBuilder.() -> Unit): MyInput {
  // MyInput builder DSL
  return MyInputBuilder().apply(block).let {
    MyInput(
          it.id ?: error("MyInput: 'id' must not be null"),
          it.name
        )
  }
}

public fun MyInput.copy(block: MyInputBuilder.() -> Unit): MyInput {
  // MyInput copy DSL
  return MyInputBuilder().also {
    it.id = id
    it.name = name
  }
  .apply(block).let {
    MyInput(
          it.id ?: error("MyInput: 'id' must not be null"),
          it.name
        )
  }
}

@GraphqlDSL
public class MyInputBuilder {
  public var id: Long? = null

  public var name: String? = null
}
