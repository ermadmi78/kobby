directive @primaryKey on FIELD_DEFINITION
directive @required on FIELD_DEFINITION
directive @default on FIELD_DEFINITION
directive @selection on FIELD_DEFINITION

scalar JSON
scalar Date

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    """
    Find country by id.
    Returns null if not found.
    """
    country(id: ID!): Country

    """
    Find countries by name.
    Returns empty list if not found.
    """
    countries(
        """Part of name of country to search"""
        name: String,

        """
        Limit of result list.
        Put -1 to be unlimited.
        """
        limit: Int! = 10,

        """Offset of result list."""
        offset: Int! = 0
    ): [Country!]!

    """
    Find film by id.
    Returns null if not found.
    """
    film(id: ID!): Film

    """
    Find films by title and genre.
    Returns empty list if not found.
    """
    films(
        """Part of title of film to search"""
        title: String,

        """Genre of film to search"""
        genre: Genre,

        """
        Limit of result list.
        Put -1 to be unlimited.
        """
        limit: Int! = 10,

        """Offset of result list."""
        offset: Int! = 0
    ): [Film!]! @selection

    """
    Find actor by id.
    Returns null if not found.
    """
    actor(id: ID!): Actor

    """
    Find actors by firstName, lastName, birthday and gender.
    Returns empty list if not found.
    """
    actors(
        """Part of first name of actor to search"""
        firstName: String,

        """Part of last name of actor to search"""
        lastName: String,

        """Find actors whose birthday is greater than or equal to birthdayFrom"""
        birthdayFrom: Date,

        """Find actors whose birthday is less than or equal to birthdayTo"""
        birthdayTo: Date,

        """Gender of actor to search"""
        gender: Gender,

        """
        Limit of result list.
        Put -1 to be unlimited.
        """
        limit: Int! = 10,

        """Offset of result list."""
        offset: Int! = 0
    ): [Actor!]! @selection

    """Find entities by tag"""
    taggable(tag: String!): [Taggable!]!
}

type Mutation {
    """Create country"""
    createCountry(
        """Name of the country"""
        name: String!
    ): Country!

    """Create film"""
    createFilm(
        """ID of the country to which the film belongs"""
        countryId: ID!,

        """Film input data"""
        film: FilmInput!,

        """Add tag to film if tag is not null"""
        tags: TagInput
    ): Film! @selection

    """Create actor"""
    createActor(
        """ID of the country to which the actor belongs"""
        countryId: ID!,

        """Actor input data"""
        actor: ActorInput!,

        """Add tag to actor if tag is not null"""
        tags: TagInput
    ): Actor! @selection

    """Update birthday of actor"""
    updateBirthday(
        """ID of the actor to update"""
        actorId: ID!,

        """New birthday"""
        birthday: Date!
    ): Actor

    """Associate film with actor"""
    associate(
        """ID of film"""
        filmId: ID!,

        """ID of actor"""
        actorId: ID!
    ): Boolean!

    """
    Add tag to film.
    Returns false if the film already had such a tag
    """
    tagFilm(
        """ID of film"""
        filmId: ID!,

        """Tag value"""
        tagValue: String!
    ): Boolean!

    """
    Add tag to actor.
    Returns false if the actor already had such a tag
    """
    tagActor(
        """ID of actor"""
        actorId: ID!,

        """Tag value"""
        tagValue: String!
    ): Boolean!
}

type Subscription {
    """Listen new countries"""
    countryCreated: Country!

    """Listen new films"""
    filmCreated(countryId: ID): Film!

    """Listen new actors"""
    actorCreated(countryId: ID): Actor!
}

"""Base interface for all entities."""
interface Entity {
    """Unique identifier of entity"""
    id: ID! @primaryKey

    """
    Fields of entity in key-value map.
    Introduced for testing complex scalars.
    """
    fields(
        """
        List of field keys to load.
        If no keys specified all entity fields will be loaded.
        """
        keys: [String!]
    ): JSON! @selection
}

"""
Entity with tags.
Introduced for testing complex inheritance.
"""
interface Taggable implements Entity {
    id: ID!
    fields(keys: [String!]): JSON!

    """Tags of entity"""
    tags: [Tag!]!
}

"""
Country entity.
The country can be home to several films and several actors.
"""
type Country implements Entity {
    id: ID!
    fields(keys: [String!]): JSON!

    """The name of the country"""
    name: String! @default

    """
    Find film by id.
    Returns null if not found.
    """
    film(id: ID!): Film

    """
    Find films of country by title and genre.
    Returns empty list if not found.
    """
    films(
        """Part of title of film to search"""
        title: String,

        """Genre of film to search"""
        genre: Genre,

        """
        Limit of result list.
        Put -1 to be unlimited.
        """
        limit: Int! = 10,

        """Offset of result list."""
        offset: Int! = 0
    ): [Film!]! @selection

    """
    Find actor by id.
    Returns null if not found.
    """
    actor(id: ID!): Actor

    """
    Find actors of country by firstName, lastName, birthday and gender.
    Returns empty list if not found.
    """
    actors(
        """Part of first name of actor to search"""
        firstName: String,

        """Part of last name of actor to search"""
        lastName: String,

        """Find actors whose birthday is greater than or equal to birthdayFrom"""
        birthdayFrom: Date,

        """Find actors whose birthday is less than or equal to birthdayTo"""
        birthdayTo: Date,

        """Gender of actor to search"""
        gender: Gender,

        """
        Limit of result list.
        Put -1 to be unlimited.
        """
        limit: Int! = 10,

        """Offset of result list."""
        offset: Int! = 0
    ): [Actor!]! @selection

    """Find entities of this country by tag"""
    taggable(tag: String!): [Taggable!]!

    """Find native entities of this country"""
    native: [Native!]!
}

"""
Film entity.
The film belongs to one country and can be played by several actors.
"""
type Film implements Entity & Taggable {
    id: ID!
    fields(keys: [String!]): JSON!
    tags: [Tag!]!

    """Title of film"""
    title: String! @default

    """Genre of film."""
    genre: Genre!

    """ID of the country to which the film belongs"""
    countryId: ID! @required

    """The country to which the film belongs"""
    country: Country!

    """
    Find actors of film by firstName, lastName, birthday and gender.
    Returns empty list if not found.
    """
    actors(
        """Part of first name of actor to search"""
        firstName: String,

        """Part of last name of actor to search"""
        lastName: String,

        """Find actors whose birthday is greater than or equal to birthdayFrom"""
        birthdayFrom: Date,

        """Find actors whose birthday is less than or equal to birthdayTo"""
        birthdayTo: Date,

        """Gender of actor to search"""
        gender: Gender,

        """
        Limit of result list.
        Put -1 to be unlimited.
        """
        limit: Int! = 10,

        """Offset of result list."""
        offset: Int! = 0
    ): [Actor!]! @selection
}

"""Enum of available film genres"""
enum Genre {
    """Drama"""
    DRAMA

    """Comedy"""
    COMEDY

    """Thriller"""
    THRILLER

    """Horror"""
    HORROR
}

"""Film input data"""
input FilmInput {
    """Title of film"""
    title: String!

    """Genre of film"""
    genre: Genre! = DRAMA
}

"""
Actor entity.
The actor belongs to one country and can play in several films.
"""
type Actor implements Entity & Taggable {
    """Unique identifier of actor"""
    id: ID!
    fields(keys: [String!]): JSON!
    tags: [Tag!]!

    """
    First name of actor.
    I assume all actors have a first name - so field is not null.
    """
    firstName: String! @default

    """
    Surname of the actor.
    This field is nullable because the actor can use an alias and not have a last name.
    """
    lastName: String @default

    """Actor's birthday"""
    birthday: Date! @required

    """Actor's gender"""
    gender: Gender!

    """
    ID of the country to which the actor belongs
    (@primaryKey added to test complex primary keys)
    """
    countryId: ID! @primaryKey

    """The country to which the actor belongs"""
    country: Country!

    """
    Find films of actor by title and genre.
    Returns empty list if not found.
    """
    films(
        """Part of title of film to search"""
        title: String,

        """Genre of film to search"""
        genre: Genre,

        """
        Limit of result list.
        Put -1 to be unlimited.
        """
        limit: Int! = 10,

        """Offset of result list."""
        offset: Int! = 0
    ): [Film!]! @selection
}

"""The gender of the actor"""
enum Gender {
    MALE
    FEMALE
}

"""Actor input data"""
input ActorInput {
    """First name of actor."""
    firstName: String!

    """
    Surname of the actor.
    This field is nullable because the actor can use an alias and not have a last name.
    """
    lastName: String

    """Actor's birthday"""
    birthday: Date!

    """Actor's gender"""
    gender: Gender!
}

"""
Type Tag is introduced for testing types with single value.
See class TagDto.
"""
type Tag {
    """The tag value"""
    value: String!
}

"""
Input TagInput is introduced for testing inputs with single value.
See class TagInput.
"""
input TagInput {
    """The tag value"""
    value: String!
}

"""Union of natives"""
union Native = Actor | Film