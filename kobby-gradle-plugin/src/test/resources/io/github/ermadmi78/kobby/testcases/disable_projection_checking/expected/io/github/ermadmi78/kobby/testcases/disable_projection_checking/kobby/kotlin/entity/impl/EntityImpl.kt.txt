@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.CinemaContext
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.cinemaJson
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.dto.ActorDto
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.dto.CountryDto
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.dto.EntityDto
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.dto.FilmDto
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.entity.ActorProjection
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.entity.CountryProjection
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.entity.Entity
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.entity.EntityFieldsSelection
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.entity.EntityQualifiedProjection
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.entity.FilmProjection
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.MutableMap
import kotlin.collections.MutableSet
import kotlin.collections.Set
import kotlin.collections.mutableSetOf
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.isNotEmpty
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.encodeToJsonElement

internal open class EntityQualifiedProjectionImpl : EntityQualifiedProjection {
  internal val ___innerIgnore: MutableSet<String> = mutableSetOf("id")

  internal var __innerFields1: EntityFieldsSelectionImpl? = null

  internal val ___inner__onFilm: FilmProjectionImpl = FilmProjectionImpl()

  internal val ___inner__onActor: ActorProjectionImpl = ActorProjectionImpl()

  internal val ___inner__onCountry: CountryProjectionImpl = CountryProjectionImpl()

  override fun fields(__selection: EntityFieldsSelection.() -> Unit) {
    __innerFields1 = EntityFieldsSelectionImpl().apply(__selection)

    ___inner__onFilm.__innerFields1 = __innerFields1

    ___inner__onActor.__innerFields1 = __innerFields1

    ___inner__onCountry.__innerFields1 = __innerFields1

    ___innerIgnore += "fields"
  }

  override fun __onFilm(__projection: FilmProjection.() -> Unit) {
    FilmProjectionImpl().apply(__projection).___innerRepeatProjection(___innerIgnore, ___inner__onFilm)
  }

  override fun __onActor(__projection: ActorProjection.() -> Unit) {
    ActorProjectionImpl().apply(__projection).___innerRepeatProjection(___innerIgnore, ___inner__onActor)
  }

  override fun __onCountry(__projection: CountryProjection.() -> Unit) {
    CountryProjectionImpl().apply(__projection).___innerRepeatProjection(___innerIgnore, ___inner__onCountry)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>,
      __projection: EntityQualifiedProjection) {
    if ("fields" !in ignore && __innerFields1 != null) {
      __projection.fields {
        this@EntityQualifiedProjectionImpl.__innerFields1!!.___innerRepeatSelection(this)
      }
    }
    __projection.__onFilm {
      this@EntityQualifiedProjectionImpl.___inner__onFilm.___innerRepeatProjection(setOf(), this)
    }
    __projection.__onActor {
      this@EntityQualifiedProjectionImpl.___inner__onActor.___innerRepeatProjection(setOf(), this)
    }
    __projection.__onCountry {
      this@EntityQualifiedProjectionImpl.___inner__onCountry.___innerRepeatProjection(setOf(), this)
    }
  }

  /**
   * Projection for field: fields
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildFields1(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, JsonElement>,
  ) {
    if ("fields" !in ignore && __innerFields1 != null) {
      body.append(' ').append("fields")
      var counter = 0
      val addBrackets = __innerFields1!!.keys != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: fields.keys
      if (__innerFields1!!.keys != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = cinemaJson.encodeToJsonElement(__innerFields1!!.keys!!)
        body.append("keys").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("[String!]")
      }

      if (addBrackets) {
        body.append(')')
      }
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, JsonElement>,
  ) {
    body.append(' ').append('{')

    // Field: id
    if ("id" !in ignore) {
      body.append(' ').append("id")
    }

    // Field: fields
    ____innerBuildFields1(ignore, header, body, arguments)

    body.append(' ').append("__typename")

    val subBody = StringBuilder()

    // Qualification of: Film
    subBody.clear()
    ___inner__onFilm.___innerBuild(___innerIgnore, header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Film").append(subBody)
    }

    // Qualification of: Actor
    subBody.clear()
    ___inner__onActor.___innerBuild(___innerIgnore, header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Actor").append(subBody)
    }

    // Qualification of: Country
    subBody.clear()
    ___inner__onCountry.___innerBuild(___innerIgnore, header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Country").append(subBody)
    }

    body.append(' ').append('}')
  }
}

internal class EntityFieldsSelectionImpl : EntityFieldsSelection {
  override var keys: List<String>? = null

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatSelection(__selection: EntityFieldsSelection) {
    __selection.keys = keys
  }
}

internal fun EntityDto.buildEntity(__innerContext: CinemaContext,
    __innerProjection: EntityQualifiedProjectionImpl): Entity = when(this) {
  is FilmDto -> FilmImpl(__innerContext, __innerProjection.___inner__onFilm, this)
  is ActorDto -> ActorImpl(__innerContext, __innerProjection.___inner__onActor, this)
  is CountryDto -> CountryImpl(__innerContext, __innerProjection.___inner__onCountry, this)
  else -> error("""Invalid algorithm - unexpected dto type: ${this::class.simpleName}""")
}
