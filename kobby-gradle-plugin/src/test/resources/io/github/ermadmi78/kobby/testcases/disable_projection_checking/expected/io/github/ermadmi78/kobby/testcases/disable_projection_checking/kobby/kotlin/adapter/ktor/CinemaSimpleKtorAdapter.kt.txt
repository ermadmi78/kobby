@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.adapter.ktor

import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.CinemaAdapter
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.dto.MutationDto
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.dto.QueryDto
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.dto.graphql.CinemaMutationException
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.dto.graphql.CinemaMutationResult
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.dto.graphql.CinemaQueryException
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.dto.graphql.CinemaQueryResult
import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.dto.graphql.CinemaRequest
import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.http.ContentType
import io.ktor.http.contentType
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.collections.Map
import kotlin.collections.isNotEmpty
import kotlin.collections.mapOf
import kotlin.let
import kotlin.takeIf
import kotlinx.serialization.json.JsonObject

public open class CinemaSimpleKtorAdapter(
  protected val client: HttpClient,
  protected val url: String? = null,
  protected val headers: suspend () -> Map<String, String> = { mapOf<String, String>() },
  protected val listener: (CinemaRequest) -> Unit = {},
) : CinemaAdapter {
  override suspend fun executeQuery(query: String, variables: JsonObject): QueryDto {
    val request = CinemaRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = headers()
    val result = client.post {
      setBody<CinemaRequest>(request)
      contentType(ContentType.Application.Json)
      this@CinemaSimpleKtorAdapter.url?.also {
        url(it)
      }
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .body<CinemaQueryResult>()

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw CinemaQueryException(
            "GraphQL query failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw CinemaQueryException(
          "GraphQL query completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }

  override suspend fun executeMutation(query: String, variables: JsonObject): MutationDto {
    val request = CinemaRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = headers()
    val result = client.post {
      setBody<CinemaRequest>(request)
      contentType(ContentType.Application.Json)
      this@CinemaSimpleKtorAdapter.url?.also {
        url(it)
      }
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .body<CinemaMutationResult>()

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw CinemaMutationException(
            "GraphQL mutation failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw CinemaMutationException(
          "GraphQL mutation completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }
}
