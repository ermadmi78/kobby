@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.CinemaDSL
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * Type Tag is introduced for testing types with single value.
 * See class TagDto.
 */
@Serializable
@SerialName("Tag")
public data class TagDto(
  /**
   * The tag value
   */
  public val `value`: String? = null,
)

public fun TagDto.toBuilder(): TagDtoBuilder = TagDtoBuilder().also {
  it.`value` = this.`value`
}

public fun TagDtoBuilder.toDto(): TagDto = TagDto(
  `value`
)

public fun TagDto(block: TagDtoBuilder.() -> Unit): TagDto = TagDtoBuilder().apply(block).toDto()

public fun TagDto.copy(block: TagDtoBuilder.() -> Unit): TagDto = toBuilder().apply(block).toDto()

/**
 * Type Tag is introduced for testing types with single value.
 * See class TagDto.
 */
@CinemaDSL
public class TagDtoBuilder {
  /**
   * The tag value
   */
  public var `value`: String? = null
}
