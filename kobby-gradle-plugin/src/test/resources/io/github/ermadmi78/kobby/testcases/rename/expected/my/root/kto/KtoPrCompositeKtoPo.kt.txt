@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package my.root.kto

import io.ktor.client.HttpClient
import io.ktor.client.plugins.websocket.webSocket
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.websocket.Frame
import io.ktor.websocket.WebSocketSession
import io.ktor.websocket.readText
import io.ktor.websocket.send
import kotlin.Any
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.Map
import kotlin.collections.contains
import kotlin.collections.forEach
import kotlin.collections.isNotEmpty
import kotlin.collections.mapOf
import kotlin.collections.plus
import kotlin.coroutines.cancellation.CancellationException
import kotlin.error
import kotlin.let
import kotlin.random.Random
import kotlin.require
import kotlin.takeIf
import kotlin.to
import kotlinx.coroutines.withTimeoutOrNull
import my.root.ctx.PrefCtxAdapterPostCtx
import my.root.ctx.PrefCtxMapperPostCtx
import my.root.ctx.PrefCtxReceiverPostCtx
import my.root.dto1.DPrefMyMutationDPost
import my.root.dto1.DPrefMyQueryDPost
import my.root.dto1.DPrefMySubscriptionDPost
import my.root.dto1.gr_ql.GPrefClientMessageCompleteGPost
import my.root.dto1.gr_ql.GPrefClientMessageConnectionInitGPost
import my.root.dto1.gr_ql.GPrefClientMessageGPost
import my.root.dto1.gr_ql.GPrefClientMessagePingGPost
import my.root.dto1.gr_ql.GPrefClientMessagePongGPost
import my.root.dto1.gr_ql.GPrefClientMessageSubscribeGPost
import my.root.dto1.gr_ql.GPrefMutationExceptionGPost
import my.root.dto1.gr_ql.GPrefMutationResultGPost
import my.root.dto1.gr_ql.GPrefQueryExceptionGPost
import my.root.dto1.gr_ql.GPrefQueryResultGPost
import my.root.dto1.gr_ql.GPrefRequestGPost
import my.root.dto1.gr_ql.GPrefServerMessageCompleteGPost
import my.root.dto1.gr_ql.GPrefServerMessageConnectionAckGPost
import my.root.dto1.gr_ql.GPrefServerMessageErrorGPost
import my.root.dto1.gr_ql.GPrefServerMessageGPost
import my.root.dto1.gr_ql.GPrefServerMessageNextGPost
import my.root.dto1.gr_ql.GPrefServerMessagePingGPost
import my.root.dto1.gr_ql.GPrefServerMessagePongGPost
import my.root.dto1.gr_ql.GPrefSubscriptionExceptionGPost

public open class KtoPrCompositeKtoPo(
  protected val client: HttpClient,
  protected val httpUrl: String,
  protected val webSocketUrl: String,
  protected val mapper: PrefCtxMapperPostCtx,
  protected val requestHeaders: suspend () -> Map<String, String> = { mapOf<String, String>() },
  protected val subscriptionPayload: suspend () -> Map<String, Any?>? = { null },
  protected val subscriptionReceiveTimeoutMillis: Long? = 10_000,
  protected val httpAuthorizationTokenHeader: String = "Authorization",
  protected val webSocketAuthorizationTokenHeader: String = "authToken",
  protected val idGenerator: () -> String = { Random.nextLong().toString() },
  protected val listener: (GPrefRequestGPost) -> Unit = {},
) : PrefCtxAdapterPostCtx {
  override suspend fun executeQuery(query: String, variables: Map<String, Any?>):
      DPrefMyQueryDPost {
    val request = GPrefRequestGPost(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders()
    val content = client.post {
      setBody<String>(mapper.serialize(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.deserialize(content, GPrefQueryResultGPost::class)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw GPrefQueryExceptionGPost(
            "GraphQL query failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw GPrefQueryExceptionGPost(
          "GraphQL query completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }

  override suspend fun executeMutation(query: String, variables: Map<String, Any?>):
      DPrefMyMutationDPost {
    val request = GPrefRequestGPost(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders()
    val content = client.post {
      setBody<String>(mapper.serialize(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.deserialize(content, GPrefMutationResultGPost::class)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw GPrefMutationExceptionGPost(
            "GraphQL mutation failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw GPrefMutationExceptionGPost(
          "GraphQL mutation completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }

  override suspend fun executeSubscription(
    query: String,
    variables: Map<String, Any?>,
    block: suspend PrefCtxReceiverPostCtx<DPrefMySubscriptionDPost>.() -> Unit,
  ) {
    val httpHeaders: Map<String, String> = requestHeaders()
    val payload: Map<String, Any?>? = subscriptionPayload()
    client.webSocket(
      webSocketUrl,
      request = {
        httpHeaders.forEach { (key, value) ->
          headers[key] = value
        }
      }
    ) {
      var initPayload: Map<String, Any?>? = payload
      if (httpAuthorizationTokenHeader in httpHeaders) {
        if (initPayload == null) {
          initPayload = mapOf()
        }

        if (webSocketAuthorizationTokenHeader !in initPayload) {
          @Suppress("SuspiciousCollectionReassignment")
          initPayload += mapOf(webSocketAuthorizationTokenHeader to
              httpHeaders[httpAuthorizationTokenHeader])
        }
      }

      val request = GPrefRequestGPost(query, variables)
      listener(request)

      executeSubscriptionImpl(initPayload, request, block)
    }
  }

  protected open suspend fun WebSocketSession.executeSubscriptionImpl(
    initPayload: Map<String, Any?>?,
    request: GPrefRequestGPost,
    block: suspend PrefCtxReceiverPostCtx<DPrefMySubscriptionDPost>.() -> Unit,
  ) {
    val socket = this
    sendMessage(socket, GPrefClientMessageConnectionInitGPost(initPayload))

    while (true) {
      when (val reply = receiveMessage(socket) ?: throw GPrefSubscriptionExceptionGPost("""Receive timeout expired ($subscriptionReceiveTimeoutMillis millis)""",
          request)) {
        is GPrefServerMessageConnectionAckGPost -> {
          break
        }
        is GPrefServerMessagePingGPost -> {
          sendMessage(socket, GPrefClientMessagePongGPost())
          continue
        }
        else -> {
          throw GPrefSubscriptionExceptionGPost("""Invalid protocol - unexpected reply: $reply""",
              request)
        }
      }
    }

    val subscriptionId = idGenerator()
    sendMessage(socket, GPrefClientMessageSubscribeGPost(subscriptionId, request))

    sendMessage(socket, GPrefClientMessagePingGPost())
    receiveMessage(socket) ?: throw GPrefSubscriptionExceptionGPost("""Subscription timeout expired""",
        request)

    try {
      block.invoke(object : PrefCtxReceiverPostCtx<DPrefMySubscriptionDPost> {
        override suspend fun receive(): DPrefMySubscriptionDPost {
          while (true) {
            var reply = receiveMessage(socket)
            if (reply == null) {
              sendMessage(socket, GPrefClientMessagePingGPost())
              reply = receiveMessage(socket) ?: throw GPrefSubscriptionExceptionGPost("""Receive timeout expired ($subscriptionReceiveTimeoutMillis millis)""",
                  request)
            }
            when (reply) {
              is GPrefServerMessageNextGPost -> {
                require(reply.id == subscriptionId)

                val result = reply.payload
                result.errors?.takeIf { it.isNotEmpty() }?.let {
                  throw GPrefSubscriptionExceptionGPost(
                        "GraphQL subscription failed",
                        request,
                        it,
                        result.extensions,
                        result.data
                      )
                }
                return result.data ?: throw GPrefSubscriptionExceptionGPost(
                      "GraphQL subscription completes successfully but returns no data",
                      request,
                      result.errors,
                      result.extensions,
                      null
                    )
              }
              is GPrefServerMessageErrorGPost -> {
                require(reply.id == subscriptionId)
                throw GPrefSubscriptionExceptionGPost("Subscription failed", request, reply.payload)
              }
              is GPrefServerMessageCompleteGPost -> {
                require(reply.id == subscriptionId)
                throw CancellationException("Subscription finished")
              }
              is GPrefServerMessagePingGPost -> {
                sendMessage(socket, GPrefClientMessagePongGPost())
                continue
              }
              is GPrefServerMessagePongGPost -> {
                continue
              }
              else -> {
                throw GPrefSubscriptionExceptionGPost("""Invalid protocol - unexpected reply: $reply""",
                    request)
              }
            }
          }

          @Suppress("UNREACHABLE_CODE")
          error("Invalid algorithm")
        }
      })
    }
    finally {
      sendMessage(socket, GPrefClientMessageCompleteGPost(subscriptionId))
    }
  }

  protected open suspend fun sendMessage(socket: WebSocketSession,
      message: GPrefClientMessageGPost) {
    val content = mapper.serialize(message)
    socket.send(content)
  }

  protected open suspend fun receiveMessage(socket: WebSocketSession): GPrefServerMessageGPost? {
    val message = if (subscriptionReceiveTimeoutMillis == null) {
      socket.incoming.receive()
    }
    else {
      withTimeoutOrNull(subscriptionReceiveTimeoutMillis) {
        socket.incoming.receive()
      }
    }

    if (message == null) {
      return null
    }

    val content = (message as Frame.Text).readText()
    return mapper.deserialize(content, GPrefServerMessageGPost::class)
  }
}
