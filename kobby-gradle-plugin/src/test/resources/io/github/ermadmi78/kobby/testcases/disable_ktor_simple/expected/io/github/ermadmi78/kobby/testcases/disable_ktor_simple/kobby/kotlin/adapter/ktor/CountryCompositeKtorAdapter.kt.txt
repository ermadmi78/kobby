@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.adapter.ktor

import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.CountryAdapter
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.CountryMapper
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.CountryReceiver
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.MutationDto
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.QueryDto
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.SubscriptionDto
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryClientMessage
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryClientMessageComplete
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryClientMessageConnectionInit
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryClientMessagePing
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryClientMessagePong
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryClientMessageSubscribe
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryMutationException
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryMutationResult
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryQueryException
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryQueryResult
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryRequest
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryServerMessage
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryServerMessageComplete
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryServerMessageConnectionAck
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryServerMessageError
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryServerMessageNext
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryServerMessagePing
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryServerMessagePong
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountrySubscriptionException
import io.ktor.client.HttpClient
import io.ktor.client.plugins.websocket.webSocket
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.websocket.Frame
import io.ktor.websocket.WebSocketSession
import io.ktor.websocket.readText
import io.ktor.websocket.send
import kotlin.Any
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.Map
import kotlin.collections.contains
import kotlin.collections.forEach
import kotlin.collections.isNotEmpty
import kotlin.collections.mapOf
import kotlin.collections.plus
import kotlin.coroutines.cancellation.CancellationException
import kotlin.error
import kotlin.let
import kotlin.random.Random
import kotlin.require
import kotlin.takeIf
import kotlin.to
import kotlinx.coroutines.withTimeoutOrNull

public open class CountryCompositeKtorAdapter(
  protected val client: HttpClient,
  protected val httpUrl: String,
  protected val webSocketUrl: String,
  protected val mapper: CountryMapper,
  protected val requestHeaders: suspend () -> Map<String, String> = { mapOf<String, String>() },
  protected val subscriptionPayload: suspend () -> Map<String, Any?>? = { null },
  protected val subscriptionReceiveTimeoutMillis: Long? = 10_000,
  protected val httpAuthorizationTokenHeader: String = "Authorization",
  protected val webSocketAuthorizationTokenHeader: String = "authToken",
  protected val idGenerator: () -> String = { Random.nextLong().toString() },
  protected val listener: (CountryRequest) -> Unit = {},
) : CountryAdapter {
  override suspend fun executeQuery(query: String, variables: Map<String, Any?>): QueryDto {
    val request = CountryRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders()
    val content = client.post {
      setBody<String>(mapper.serialize(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.deserialize(content, CountryQueryResult::class)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw CountryQueryException(
            "GraphQL query failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw CountryQueryException(
          "GraphQL query completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }

  override suspend fun executeMutation(query: String, variables: Map<String, Any?>): MutationDto {
    val request = CountryRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders()
    val content = client.post {
      setBody<String>(mapper.serialize(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.deserialize(content, CountryMutationResult::class)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw CountryMutationException(
            "GraphQL mutation failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw CountryMutationException(
          "GraphQL mutation completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }

  override suspend fun executeSubscription(
    query: String,
    variables: Map<String, Any?>,
    block: suspend CountryReceiver<SubscriptionDto>.() -> Unit,
  ) {
    val httpHeaders: Map<String, String> = requestHeaders()
    val payload: Map<String, Any?>? = subscriptionPayload()
    client.webSocket(
      webSocketUrl,
      request = {
        httpHeaders.forEach { (key, value) ->
          headers[key] = value
        }
      }
    ) {
      var initPayload: Map<String, Any?>? = payload
      if (httpAuthorizationTokenHeader in httpHeaders) {
        if (initPayload == null) {
          initPayload = mapOf()
        }

        if (webSocketAuthorizationTokenHeader !in initPayload) {
          @Suppress("SuspiciousCollectionReassignment")
          initPayload += mapOf(webSocketAuthorizationTokenHeader to
              httpHeaders[httpAuthorizationTokenHeader])
        }
      }

      val request = CountryRequest(query, variables)
      listener(request)

      executeSubscriptionImpl(initPayload, request, block)
    }
  }

  protected open suspend fun WebSocketSession.executeSubscriptionImpl(
    initPayload: Map<String, Any?>?,
    request: CountryRequest,
    block: suspend CountryReceiver<SubscriptionDto>.() -> Unit,
  ) {
    val socket = this
    sendMessage(socket, CountryClientMessageConnectionInit(initPayload))

    while (true) {
      when (val reply = receiveMessage(socket) ?: throw CountrySubscriptionException("""Receive timeout expired ($subscriptionReceiveTimeoutMillis millis)""",
          request)) {
        is CountryServerMessageConnectionAck -> {
          break
        }
        is CountryServerMessagePing -> {
          sendMessage(socket, CountryClientMessagePong())
          continue
        }
        else -> {
          throw CountrySubscriptionException("""Invalid protocol - unexpected reply: $reply""",
              request)
        }
      }
    }

    val subscriptionId = idGenerator()
    sendMessage(socket, CountryClientMessageSubscribe(subscriptionId, request))

    sendMessage(socket, CountryClientMessagePing())
    receiveMessage(socket) ?: throw CountrySubscriptionException("""Subscription timeout expired""",
        request)

    try {
      block.invoke(object : CountryReceiver<SubscriptionDto> {
        override suspend fun receive(): SubscriptionDto {
          while (true) {
            var reply = receiveMessage(socket)
            if (reply == null) {
              sendMessage(socket, CountryClientMessagePing())
              reply = receiveMessage(socket) ?: throw CountrySubscriptionException("""Receive timeout expired ($subscriptionReceiveTimeoutMillis millis)""",
                  request)
            }
            when (reply) {
              is CountryServerMessageNext -> {
                require(reply.id == subscriptionId)

                val result = reply.payload
                result.errors?.takeIf { it.isNotEmpty() }?.let {
                  throw CountrySubscriptionException(
                        "GraphQL subscription failed",
                        request,
                        it,
                        result.extensions,
                        result.data
                      )
                }
                return result.data ?: throw CountrySubscriptionException(
                      "GraphQL subscription completes successfully but returns no data",
                      request,
                      result.errors,
                      result.extensions,
                      null
                    )
              }
              is CountryServerMessageError -> {
                require(reply.id == subscriptionId)
                throw CountrySubscriptionException("Subscription failed", request, reply.payload)
              }
              is CountryServerMessageComplete -> {
                require(reply.id == subscriptionId)
                throw CancellationException("Subscription finished")
              }
              is CountryServerMessagePing -> {
                sendMessage(socket, CountryClientMessagePong())
                continue
              }
              is CountryServerMessagePong -> {
                continue
              }
              else -> {
                throw CountrySubscriptionException("""Invalid protocol - unexpected reply: $reply""",
                    request)
              }
            }
          }

          @Suppress("UNREACHABLE_CODE")
          error("Invalid algorithm")
        }
      })
    }
    finally {
      sendMessage(socket, CountryClientMessageComplete(subscriptionId))
    }
  }

  protected open suspend fun sendMessage(socket: WebSocketSession, message: CountryClientMessage) {
    val content = mapper.serialize(message)
    socket.send(content)
  }

  protected open suspend fun receiveMessage(socket: WebSocketSession): CountryServerMessage? {
    val message = if (subscriptionReceiveTimeoutMillis == null) {
      socket.incoming.receive()
    }
    else {
      withTimeoutOrNull(subscriptionReceiveTimeoutMillis) {
        socket.incoming.receive()
      }
    }

    if (message == null) {
      return null
    }

    val content = (message as Frame.Text).readText()
    return mapper.deserialize(content, CountryServerMessage::class)
  }
}
