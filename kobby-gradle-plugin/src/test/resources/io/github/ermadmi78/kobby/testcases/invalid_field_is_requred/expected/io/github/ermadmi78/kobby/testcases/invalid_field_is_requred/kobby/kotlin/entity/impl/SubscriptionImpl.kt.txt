@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package io.github.ermadmi78.kobby.testcases.invalid_field_is_requred.kobby.kotlin.entity.impl

import io.github.ermadmi78.kobby.testcases.invalid_field_is_requred.kobby.kotlin.InvalidFieldIsRequredContext
import io.github.ermadmi78.kobby.testcases.invalid_field_is_requred.kobby.kotlin.InvalidFieldIsRequredSubscriber
import io.github.ermadmi78.kobby.testcases.invalid_field_is_requred.kobby.kotlin.dto.SubscriptionDto
import io.github.ermadmi78.kobby.testcases.invalid_field_is_requred.kobby.kotlin.entity.Mutation
import io.github.ermadmi78.kobby.testcases.invalid_field_is_requred.kobby.kotlin.entity.MutationProjection
import io.github.ermadmi78.kobby.testcases.invalid_field_is_requred.kobby.kotlin.entity.Query
import io.github.ermadmi78.kobby.testcases.invalid_field_is_requred.kobby.kotlin.entity.QueryProjection
import io.github.ermadmi78.kobby.testcases.invalid_field_is_requred.kobby.kotlin.entity.Subscription
import io.github.ermadmi78.kobby.testcases.invalid_field_is_requred.kobby.kotlin.entity.SubscriptionProjection
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.text.StringBuilder
import kotlin.text.buildString

internal class SubscriptionImpl(
  internal val __innerContext: InvalidFieldIsRequredContext,
  internal val __innerProjection: SubscriptionProjectionImpl,
  internal val __innerDto: SubscriptionDto
) : Subscription {
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE")
  public override fun toString(): String = buildString {
    append("Subscription").append('(')
    append(')')
  }

  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query =
      __innerContext.query(__projection)

  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation =
      __innerContext.mutation(__projection)

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      InvalidFieldIsRequredSubscriber<Subscription> = __innerContext.subscription(__projection)

  public override fun SubscriptionProjection.__withCurrentProjection(): Unit {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class SubscriptionProjectionImpl : SubscriptionProjection {
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: SubscriptionProjection):
      Unit {
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE")
  internal fun ___innerBuild(
    ignore: Set<String>,
    header: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>
  ): Unit {
    body.append(' ').append('{')

    body.append(' ').append('}')
  }
}

internal fun SubscriptionDto.buildEntity(__innerContext: InvalidFieldIsRequredContext,
    __innerProjection: SubscriptionProjectionImpl): Subscription = SubscriptionImpl(__innerContext,
    __innerProjection, this)
