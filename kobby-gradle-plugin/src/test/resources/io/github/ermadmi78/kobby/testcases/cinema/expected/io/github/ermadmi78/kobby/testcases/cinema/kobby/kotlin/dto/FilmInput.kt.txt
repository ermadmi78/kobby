@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonInclude
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.CinemaDSL
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.error
import kotlin.let

/**
 * Film input data
 */
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class FilmInput(
  /**
   * Title of film
   */
  public val title: String,
  /**
   * Genre of film  
   * > Default: DRAMA
   */
  public val genre: Genre = Genre.DRAMA
)

public fun FilmInput(block: FilmInputBuilder.() -> Unit): FilmInput {
  // FilmInput builder DSL
  return FilmInputBuilder().apply(block).let {
    FilmInput(
          it.title ?: error("FilmInput: 'title' must not be null"),
          it.genre
        )
  }
}

public fun FilmInput.copy(block: FilmInputBuilder.() -> Unit): FilmInput {
  // FilmInput copy DSL
  return FilmInputBuilder().also {
    it.title = title
    it.genre = genre
  }
  .apply(block).let {
    FilmInput(
          it.title ?: error("FilmInput: 'title' must not be null"),
          it.genre
        )
  }
}

/**
 * Film input data
 */
@CinemaDSL
public class FilmInputBuilder {
  /**
   * Title of film
   */
  public var title: String? = null

  /**
   * Genre of film  
   * > Default: DRAMA
   */
  public var genre: Genre = Genre.DRAMA
}
