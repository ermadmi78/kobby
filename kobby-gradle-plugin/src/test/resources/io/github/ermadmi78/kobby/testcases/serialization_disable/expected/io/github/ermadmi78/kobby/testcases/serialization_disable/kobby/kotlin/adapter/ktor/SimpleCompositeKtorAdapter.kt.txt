@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.adapter.ktor

import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.SimpleAdapter
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.SimpleMapper
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.SimpleReceiver
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.MutationDto
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.QueryDto
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.SubscriptionDto
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleClientMessage
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleClientMessageComplete
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleClientMessageConnectionInit
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleClientMessagePing
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleClientMessagePong
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleClientMessageSubscribe
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleMutationException
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleMutationResult
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleQueryException
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleQueryResult
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleRequest
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleServerMessage
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleServerMessageComplete
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleServerMessageConnectionAck
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleServerMessageError
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleServerMessageNext
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleServerMessagePing
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleServerMessagePong
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleSubscriptionException
import io.ktor.client.HttpClient
import io.ktor.client.plugins.websocket.webSocket
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.websocket.Frame
import io.ktor.websocket.WebSocketSession
import io.ktor.websocket.readText
import io.ktor.websocket.send
import kotlin.Any
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.Map
import kotlin.collections.contains
import kotlin.collections.forEach
import kotlin.collections.isNotEmpty
import kotlin.collections.mapOf
import kotlin.collections.plus
import kotlin.coroutines.cancellation.CancellationException
import kotlin.error
import kotlin.let
import kotlin.random.Random
import kotlin.require
import kotlin.takeIf
import kotlin.to
import kotlinx.coroutines.withTimeoutOrNull

public open class SimpleCompositeKtorAdapter(
  protected val client: HttpClient,
  protected val httpUrl: String,
  protected val webSocketUrl: String,
  protected val mapper: SimpleMapper,
  protected val requestHeaders: suspend () -> Map<String, String> = { mapOf<String, String>() },
  protected val subscriptionPayload: suspend () -> Map<String, Any?>? = { null },
  protected val subscriptionReceiveTimeoutMillis: Long? = 10_000,
  protected val httpAuthorizationTokenHeader: String = "Authorization",
  protected val webSocketAuthorizationTokenHeader: String = "authToken",
  protected val idGenerator: () -> String = { Random.nextLong().toString() },
  protected val listener: (SimpleRequest) -> Unit = {},
) : SimpleAdapter {
  override suspend fun executeQuery(query: String, variables: Map<String, Any?>): QueryDto {
    val request = SimpleRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders()
    val content = client.post {
      setBody<String>(mapper.serialize(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.deserialize(content, SimpleQueryResult::class)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw SimpleQueryException(
            "GraphQL query failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw SimpleQueryException(
          "GraphQL query completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }

  override suspend fun executeMutation(query: String, variables: Map<String, Any?>): MutationDto {
    val request = SimpleRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders()
    val content = client.post {
      setBody<String>(mapper.serialize(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.deserialize(content, SimpleMutationResult::class)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw SimpleMutationException(
            "GraphQL mutation failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw SimpleMutationException(
          "GraphQL mutation completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }

  override suspend fun executeSubscription(
    query: String,
    variables: Map<String, Any?>,
    block: suspend SimpleReceiver<SubscriptionDto>.() -> Unit,
  ) {
    val httpHeaders: Map<String, String> = requestHeaders()
    val payload: Map<String, Any?>? = subscriptionPayload()
    client.webSocket(
      webSocketUrl,
      request = {
        httpHeaders.forEach { (key, value) ->
          headers[key] = value
        }
      }
    ) {
      var initPayload: Map<String, Any?>? = payload
      if (httpAuthorizationTokenHeader in httpHeaders) {
        if (initPayload == null) {
          initPayload = mapOf()
        }

        if (webSocketAuthorizationTokenHeader !in initPayload) {
          @Suppress("SuspiciousCollectionReassignment")
          initPayload += mapOf(webSocketAuthorizationTokenHeader to
              httpHeaders[httpAuthorizationTokenHeader])
        }
      }

      val request = SimpleRequest(query, variables)
      listener(request)

      executeSubscriptionImpl(initPayload, request, block)
    }
  }

  protected open suspend fun WebSocketSession.executeSubscriptionImpl(
    initPayload: Map<String, Any?>?,
    request: SimpleRequest,
    block: suspend SimpleReceiver<SubscriptionDto>.() -> Unit,
  ) {
    val socket = this
    sendMessage(socket, SimpleClientMessageConnectionInit(initPayload))

    while (true) {
      when (val reply = receiveMessage(socket) ?: throw SimpleSubscriptionException("""Receive timeout expired ($subscriptionReceiveTimeoutMillis millis)""",
          request)) {
        is SimpleServerMessageConnectionAck -> {
          break
        }
        is SimpleServerMessagePing -> {
          sendMessage(socket, SimpleClientMessagePong())
          continue
        }
        else -> {
          throw SimpleSubscriptionException("""Invalid protocol - unexpected reply: $reply""",
              request)
        }
      }
    }

    val subscriptionId = idGenerator()
    sendMessage(socket, SimpleClientMessageSubscribe(subscriptionId, request))

    sendMessage(socket, SimpleClientMessagePing())
    receiveMessage(socket) ?: throw SimpleSubscriptionException("""Subscription timeout expired""",
        request)

    try {
      block.invoke(object : SimpleReceiver<SubscriptionDto> {
        override suspend fun receive(): SubscriptionDto {
          while (true) {
            var reply = receiveMessage(socket)
            if (reply == null) {
              sendMessage(socket, SimpleClientMessagePing())
              reply = receiveMessage(socket) ?: throw SimpleSubscriptionException("""Receive timeout expired ($subscriptionReceiveTimeoutMillis millis)""",
                  request)
            }
            when (reply) {
              is SimpleServerMessageNext -> {
                require(reply.id == subscriptionId)

                val result = reply.payload
                result.errors?.takeIf { it.isNotEmpty() }?.let {
                  throw SimpleSubscriptionException(
                        "GraphQL subscription failed",
                        request,
                        it,
                        result.extensions,
                        result.data
                      )
                }
                return result.data ?: throw SimpleSubscriptionException(
                      "GraphQL subscription completes successfully but returns no data",
                      request,
                      result.errors,
                      result.extensions,
                      null
                    )
              }
              is SimpleServerMessageError -> {
                require(reply.id == subscriptionId)
                throw SimpleSubscriptionException("Subscription failed", request, reply.payload)
              }
              is SimpleServerMessageComplete -> {
                require(reply.id == subscriptionId)
                throw CancellationException("Subscription finished")
              }
              is SimpleServerMessagePing -> {
                sendMessage(socket, SimpleClientMessagePong())
                continue
              }
              is SimpleServerMessagePong -> {
                continue
              }
              else -> {
                throw SimpleSubscriptionException("""Invalid protocol - unexpected reply: $reply""",
                    request)
              }
            }
          }

          @Suppress("UNREACHABLE_CODE")
          error("Invalid algorithm")
        }
      })
    }
    finally {
      sendMessage(socket, SimpleClientMessageComplete(subscriptionId))
    }
  }

  protected open suspend fun sendMessage(socket: WebSocketSession, message: SimpleClientMessage) {
    val content = mapper.serialize(message)
    socket.send(content)
  }

  protected open suspend fun receiveMessage(socket: WebSocketSession): SimpleServerMessage? {
    val message = if (subscriptionReceiveTimeoutMillis == null) {
      socket.incoming.receive()
    }
    else {
      withTimeoutOrNull(subscriptionReceiveTimeoutMillis) {
        socket.incoming.receive()
      }
    }

    if (message == null) {
      return null
    }

    val content = (message as Frame.Text).readText()
    return mapper.deserialize(content, SimpleServerMessage::class)
  }
}
