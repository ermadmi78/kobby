@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.disable_projection_checking.kobby.kotlin.CinemaDSL
import kotlin.Boolean
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
@SerialName("Mutation")
public data class MutationDto(
  /**
   * Create country
   */
  public val createCountry: CountryDto? = null,
  /**
   * Create film
   */
  public val createFilm: FilmDto? = null,
  /**
   * Create actor
   */
  public val createActor: ActorDto? = null,
  /**
   * Update birthday of actor
   */
  public val updateBirthday: ActorDto? = null,
  /**
   * Associate film with actor
   */
  public val associate: Boolean? = null,
  /**
   * Add tag to film.
   * Returns false if the film already had such a tag
   */
  public val tagFilm: Boolean? = null,
  /**
   * Add tag to actor.
   * Returns false if the actor already had such a tag
   */
  public val tagActor: Boolean? = null,
)

public fun MutationDto.toBuilder(): MutationDtoBuilder = MutationDtoBuilder().also {
  it.createCountry = this.createCountry
  it.createFilm = this.createFilm
  it.createActor = this.createActor
  it.updateBirthday = this.updateBirthday
  it.associate = this.associate
  it.tagFilm = this.tagFilm
  it.tagActor = this.tagActor
}

public fun MutationDtoBuilder.toDto(): MutationDto = MutationDto(
  createCountry,
  createFilm,
  createActor,
  updateBirthday,
  associate,
  tagFilm,
  tagActor
)

public fun MutationDto(block: MutationDtoBuilder.() -> Unit): MutationDto =
    MutationDtoBuilder().apply(block).toDto()

public fun MutationDto.copy(block: MutationDtoBuilder.() -> Unit): MutationDto =
    toBuilder().apply(block).toDto()

@CinemaDSL
public class MutationDtoBuilder {
  /**
   * Create country
   */
  public var createCountry: CountryDto? = null

  /**
   * Create film
   */
  public var createFilm: FilmDto? = null

  /**
   * Create actor
   */
  public var createActor: ActorDto? = null

  /**
   * Update birthday of actor
   */
  public var updateBirthday: ActorDto? = null

  /**
   * Associate film with actor
   */
  public var associate: Boolean? = null

  /**
   * Add tag to film.
   * Returns false if the film already had such a tag
   */
  public var tagFilm: Boolean? = null

  /**
   * Add tag to actor.
   * Returns false if the actor already had such a tag
   */
  public var tagActor: Boolean? = null
}
